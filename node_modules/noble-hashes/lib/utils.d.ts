/*! noble-hashes - MIT License (c) 2021 Paul Miller (paulmillr.com) */
export declare type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array | Uint16Array | Int16Array | Uint32Array | Int32Array;
export declare const u8: (arr: TypedArray) => Uint8Array;
export declare const u32: (arr: TypedArray) => Uint32Array;
export declare const createView: (arr: TypedArray) => DataView;
export declare const rotr: (word: number, shift: number) => number;
export declare const isLE: boolean;
export declare function bytesToHex(uint8a: Uint8Array): string;
export declare const nextTick: () => Promise<unknown>;
export declare function asyncLoop(iters: number, tick: number, cb: (i: number) => void): Promise<void>;
export declare type Input = Uint8Array | string;
export declare function toBytes(data: Input): Uint8Array;
export declare function assertNumber(n: number): void;
export declare function assertBool(b: boolean): void;
export declare function assertHash(hash: CHash): void;
export declare abstract class Hash {
    abstract blockLen: number;
    abstract outputLen: number;
    abstract update(buf: Input): this;
    abstract digest(): Uint8Array;
    abstract _writeDigest(buf: Uint8Array): void;
    abstract _clean(): void;
}
declare type EmptyObj = {};
export declare function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(def: T1, _opts?: T2): T1 & T2;
interface CloneableSHA2Like extends Hash {
    buffer: Uint8Array;
    length: number;
    view?: DataView;
    finished: boolean;
    _get(): number[];
    _set(...values: number[]): void;
    _cloneOpts?(): any;
}
interface CloneableSponge extends Hash {
    blockLen: number;
    state: Uint8Array;
    suffix: number;
    pos: number;
    finished: boolean;
}
export declare type Cloneable = CloneableSHA2Like | CloneableSponge;
export declare function cloneHashInto(first: Cloneable, second?: Cloneable): Cloneable;
export declare type CHash = ReturnType<typeof wrapConstructor>;
export declare function wrapConstructor(hashConstructor: () => Hash): {
    (message: Input): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(): Hash;
    init: () => Hash;
};
export declare function wrapConstructorWithOpts<T extends Object>(hashCons: (opts: T) => Hash): {
    (msg: Input, opts: T): Uint8Array;
    outputLen: number;
    blockLen: number;
    create(opts: T): Hash;
    init: (opts: T) => Hash;
};
export declare function randomBytes(bytesLength?: number): Uint8Array;
export {};
