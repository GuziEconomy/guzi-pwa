import { Hash, Input } from './utils';
export declare const SIGMA: Uint8Array[];
export declare type BlakeOpts = {
    dkLen?: number;
    key?: Uint8Array;
    salt?: Uint8Array;
    personalization?: Uint8Array;
};
export declare abstract class BLAKE2 extends Hash {
    readonly blockLen: number;
    readonly outputLen: number;
    readonly opts: BlakeOpts;
    abstract _compress(msg: Uint32Array, offset: number, isLast: boolean): void;
    abstract _clean(): void;
    abstract _get(): number[];
    buffer: Uint8Array;
    buffer32: Uint32Array;
    finished: boolean;
    length: number;
    constructor(blockLen: number, outputLen: number, opts: BlakeOpts, keyLen: number, saltLen: number, persLen: number);
    update(_data: Input): this;
    _writeDigest(out: Uint8Array): void;
    digest(): Uint8Array;
    _roundClean(): void;
    _cloneOpts(): BlakeOpts & {
        key: undefined;
        salt: undefined;
        personalization: undefined;
    };
}
