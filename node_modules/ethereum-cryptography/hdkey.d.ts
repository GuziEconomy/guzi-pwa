export interface Versions {
    private: number;
    public: number;
}
export declare class HDKey {
    static HARDENED_OFFSET: number;
    static fromMasterSeed(seed: Uint8Array, versions?: Versions): HDKey;
    static fromExtendedKey(base58key: string, versions?: Versions): HDKey;
    static fromJSON(json: {
        xpriv: string;
    }): HDKey;
    versions: Versions;
    depth: number;
    index: number;
    chainCode: Uint8Array | null;
    parentFingerprint: number;
    private privKey?;
    private privKeyBytes?;
    private pubKey?;
    private pubHash;
    constructor(versions?: Versions);
    get fingerprint(): number;
    get identifier(): Uint8Array | undefined;
    get pubKeyHash(): Uint8Array | undefined;
    get privateKey(): Uint8Array | null;
    set privateKey(value: Uint8Array | bigint | null);
    get publicKey(): Uint8Array | null;
    set publicKey(value: Uint8Array | null);
    get privateExtendedKey(): string;
    get publicExtendedKey(): string;
    derive(path: string): HDKey;
    deriveChild(index: number): HDKey;
    sign(hash: Uint8Array): Uint8Array;
    verify(hash: Uint8Array, signature: Uint8Array): boolean;
    wipePrivateData(): this;
    toJSON(): {
        xpriv: string;
        xpub: string;
    };
    private serialize;
}
//# sourceMappingURL=hdkey.d.ts.map